#!/usr/bin/env python3
import sys
sys.path.insert(0, '.')
from scripts.configurar_vanna_local import my_vanna as vn

vn.connect_to_postgres(host='localhost', dbname='cfo_inteligente', user='cfo_user', password='cfo_pass', port=5432)

queries = [
    # MONEDA_USD (3)
    ("Todo en dólares", "SELECT SUM(o.monto_usd) AS total_usd FROM operaciones o WHERE o.deleted_at IS NULL AND DATE_TRUNC('month', o.fecha) = DATE_TRUNC('month', CURRENT_DATE)"),
    ("Distribuciones en dólares", "SELECT SUM(dd.monto_usd) AS total_usd FROM operaciones o JOIN distribuciones_detalle dd ON dd.operacion_id = o.id WHERE o.deleted_at IS NULL AND o.tipo_operacion = 'DISTRIBUCION' AND DATE_TRUNC('year', o.fecha) = DATE_TRUNC('year', CURRENT_DATE)"),
    ("Comparación en dólares Mercedes vs Montevideo", "SELECT o.localidad, SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_usd ELSE 0 END) AS ingresos_usd FROM operaciones o WHERE o.deleted_at IS NULL AND DATE_TRUNC('month', o.fecha) = DATE_TRUNC('month', CURRENT_DATE) GROUP BY o.localidad ORDER BY ingresos_usd DESC"),
    
    # COMPARACIONES_TEMPORALES (5)
    ("Este año vs anterior", "SELECT EXTRACT(YEAR FROM o.fecha)::int AS anio, SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS ingresos FROM operaciones o WHERE o.deleted_at IS NULL AND EXTRACT(YEAR FROM o.fecha) >= EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY 1 ORDER BY 1 DESC"),
    ("Q3 vs Q2", "SELECT EXTRACT(QUARTER FROM o.fecha)::int AS trimestre, SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS ingresos FROM operaciones o WHERE o.deleted_at IS NULL AND EXTRACT(YEAR FROM o.fecha) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(QUARTER FROM o.fecha) IN (2, 3) GROUP BY 1 ORDER BY 1 DESC"),
    ("YTD vs año pasado completo", "SELECT EXTRACT(YEAR FROM o.fecha)::int AS anio, SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS ingresos FROM operaciones o WHERE o.deleted_at IS NULL AND EXTRACT(YEAR FROM o.fecha) >= EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY 1 ORDER BY 1 DESC"),
    ("Estacionalidad por mes", "SELECT EXTRACT(MONTH FROM o.fecha)::int AS mes, AVG(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS promedio_ingresos FROM operaciones o WHERE o.deleted_at IS NULL GROUP BY 1 ORDER BY 1"),
    ("Crecimiento mes a mes", "WITH mensual AS (SELECT DATE_TRUNC('month', o.fecha) AS mes, SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS ingresos FROM operaciones o WHERE o.deleted_at IS NULL AND o.fecha >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '11 months' GROUP BY 1) SELECT mes, ingresos, LAG(ingresos) OVER (ORDER BY mes) AS ingresos_anterior, ((ingresos - LAG(ingresos) OVER (ORDER BY mes)) / NULLIF(LAG(ingresos) OVER (ORDER BY mes), 0)) * 100 AS crecimiento_pct FROM mensual ORDER BY mes"),
    
    # COMPARACIONES_GEOGRAFICAS (2)
    ("Mercedes este trimestre", "SELECT SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS ingresos FROM operaciones o WHERE o.deleted_at IS NULL AND o.localidad = 'MERCEDES' AND DATE_TRUNC('quarter', o.fecha) = DATE_TRUNC('quarter', CURRENT_DATE)"),
    ("Localidad con más crecimiento", "WITH actual AS (SELECT o.localidad, SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS ingresos FROM operaciones o WHERE o.deleted_at IS NULL AND DATE_TRUNC('month', o.fecha) = DATE_TRUNC('month', CURRENT_DATE) GROUP BY o.localidad), anterior AS (SELECT o.localidad, SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS ingresos FROM operaciones o WHERE o.deleted_at IS NULL AND DATE_TRUNC('month', o.fecha) = DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' GROUP BY o.localidad) SELECT a.localidad, a.ingresos AS actual, COALESCE(b.ingresos, 0) AS anterior, ((a.ingresos - COALESCE(b.ingresos, 0)) / NULLIF(b.ingresos, 0)) * 100 AS crecimiento FROM actual a LEFT JOIN anterior b ON a.localidad = b.localidad ORDER BY crecimiento DESC NULLS LAST LIMIT 1"),
    
    # DISTRIBUCIONES (1)
    ("¿Cuánto recibió Agustina?", "SELECT COALESCE(SUM(dd.monto_uyu), 0) AS monto_uyu, COALESCE(SUM(dd.monto_usd), 0) AS monto_usd FROM operaciones o JOIN distribuciones_detalle dd ON dd.operacion_id = o.id JOIN socios s ON s.id = dd.socio_id WHERE o.deleted_at IS NULL AND o.tipo_operacion = 'DISTRIBUCION' AND DATE_TRUNC('year', o.fecha) = DATE_TRUNC('year', CURRENT_DATE) AND s.nombre = 'Agustina'"),
    
    # AREAS_NEGOCIO (6)
    ("Ingresos del área Jurídica", "SELECT SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS ingresos FROM operaciones o JOIN areas a ON a.id = o.area_id WHERE o.deleted_at IS NULL AND a.nombre = 'Jurídica' AND DATE_TRUNC('year', o.fecha) = DATE_TRUNC('year', CURRENT_DATE)"),
    ("Rentabilidad del área Contable", "SELECT ((SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) - SUM(CASE WHEN o.tipo_operacion = 'GASTO' THEN o.monto_uyu ELSE 0 END)) / NULLIF(SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END), 0)) * 100 AS rentabilidad FROM operaciones o JOIN areas a ON a.id = o.area_id WHERE o.deleted_at IS NULL AND a.nombre = 'Contable' AND DATE_TRUNC('month', o.fecha) = DATE_TRUNC('month', CURRENT_DATE)"),
    ("Balance del área Recuperación", "SELECT SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS ingresos, SUM(CASE WHEN o.tipo_operacion = 'GASTO' THEN o.monto_uyu ELSE 0 END) AS gastos, SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) - SUM(CASE WHEN o.tipo_operacion = 'GASTO' THEN o.monto_uyu ELSE 0 END) AS balance FROM operaciones o JOIN areas a ON a.id = o.area_id WHERE o.deleted_at IS NULL AND a.nombre = 'Recuperación' AND DATE_TRUNC('year', o.fecha) = DATE_TRUNC('year', CURRENT_DATE)"),
    ("Crecimiento por área", "WITH actual AS (SELECT a.nombre, SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS ingresos FROM operaciones o JOIN areas a ON a.id = o.area_id WHERE o.deleted_at IS NULL AND DATE_TRUNC('month', o.fecha) = DATE_TRUNC('month', CURRENT_DATE) GROUP BY a.nombre), anterior AS (SELECT a.nombre, SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS ingresos FROM operaciones o JOIN areas a ON a.id = o.area_id WHERE o.deleted_at IS NULL AND DATE_TRUNC('month', o.fecha) = DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' GROUP BY a.nombre) SELECT a.nombre, a.ingresos AS actual, COALESCE(b.ingresos, 0) AS anterior, ((a.ingresos - COALESCE(b.ingresos, 0)) / NULLIF(b.ingresos, 0)) * 100 AS crecimiento FROM actual a LEFT JOIN anterior b ON a.nombre = b.nombre ORDER BY crecimiento DESC NULLS LAST"),
    ("Comparación entre áreas", "SELECT a.nombre AS area, SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS ingresos, SUM(CASE WHEN o.tipo_operacion = 'GASTO' THEN o.monto_uyu ELSE 0 END) AS gastos, ((SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) - SUM(CASE WHEN o.tipo_operacion = 'GASTO' THEN o.monto_uyu ELSE 0 END)) / NULLIF(SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END), 0)) * 100 AS rentabilidad FROM operaciones o JOIN areas a ON a.id = o.area_id WHERE o.deleted_at IS NULL AND DATE_TRUNC('month', o.fecha) = DATE_TRUNC('month', CURRENT_DATE) GROUP BY a.nombre ORDER BY rentabilidad DESC NULLS LAST"),
    ("Mix de ingresos por área", "SELECT a.nombre AS area, SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS ingresos, (SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) / NULLIF((SELECT SUM(CASE WHEN tipo_operacion = 'INGRESO' THEN monto_uyu ELSE 0 END) FROM operaciones WHERE deleted_at IS NULL AND DATE_TRUNC('month', fecha) = DATE_TRUNC('month', CURRENT_DATE)), 0)) * 100 AS porcentaje FROM operaciones o JOIN areas a ON a.id = o.area_id WHERE o.deleted_at IS NULL AND DATE_TRUNC('month', o.fecha) = DATE_TRUNC('month', CURRENT_DATE) GROUP BY a.nombre ORDER BY porcentaje DESC"),
    
    # RESUMENES_KPIS (2)
    ("Estado de resultados simplificado", "SELECT SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS ingresos, SUM(CASE WHEN o.tipo_operacion = 'GASTO' THEN o.monto_uyu ELSE 0 END) AS gastos, SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) - SUM(CASE WHEN o.tipo_operacion = 'GASTO' THEN o.monto_uyu ELSE 0 END) AS utilidad, ((SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) - SUM(CASE WHEN o.tipo_operacion = 'GASTO' THEN o.monto_uyu ELSE 0 END)) / NULLIF(SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END), 0)) * 100 AS margen FROM operaciones o WHERE o.deleted_at IS NULL AND DATE_TRUNC('year', o.fecha) = DATE_TRUNC('year', CURRENT_DATE)"),
    ("Flujo de caja", "SELECT SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS entradas, SUM(CASE WHEN o.tipo_operacion = 'GASTO' THEN o.monto_uyu ELSE 0 END) AS salidas, SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) - SUM(CASE WHEN o.tipo_operacion = 'GASTO' THEN o.monto_uyu ELSE 0 END) AS flujo_neto FROM operaciones o WHERE o.deleted_at IS NULL AND DATE_TRUNC('month', o.fecha) = DATE_TRUNC('month', CURRENT_DATE)"),
    
    # ESPECIFICAS_NEGOCIO (2)
    ("¿Cómo venimos este mes?", "SELECT SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS ingresos, SUM(CASE WHEN o.tipo_operacion = 'GASTO' THEN o.monto_uyu ELSE 0 END) AS gastos, SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) - SUM(CASE WHEN o.tipo_operacion = 'GASTO' THEN o.monto_uyu ELSE 0 END) AS resultado, ((SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) - SUM(CASE WHEN o.tipo_operacion = 'GASTO' THEN o.monto_uyu ELSE 0 END)) / NULLIF(SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END), 0)) * 100 AS rentabilidad FROM operaciones o WHERE o.deleted_at IS NULL AND DATE_TRUNC('month', o.fecha) = DATE_TRUNC('month', CURRENT_DATE)"),
    ("Análisis de tendencias", "SELECT DATE_TRUNC('month', o.fecha) AS mes, SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END) AS ingresos, LAG(SUM(CASE WHEN o.tipo_operacion = 'INGRESO' THEN o.monto_uyu ELSE 0 END)) OVER (ORDER BY DATE_TRUNC('month', o.fecha)) AS ingresos_anterior FROM operaciones o WHERE o.deleted_at IS NULL AND o.fecha >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '11 months' GROUP BY 1 ORDER BY 1"),
]

print(f"\n🔧 Entrenando 21 queries restantes...")
for i, (q, sql) in enumerate(queries, 1):
    vn.train(question=q, sql=sql)
    print(f"✅ {i:2}/21 │ {q}")

print(f"\n✅ 21 queries entrenadas. Total: ~236 queries")

