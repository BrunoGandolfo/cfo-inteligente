#!/usr/bin/env python3
"""
Script de prueba exhaustiva del CFO AI
Prueba 120 preguntas cr√≠ticas del negocio
"""

import requests
import json
import time
from collections import defaultdict

# Configuraci√≥n
API_URL = "http://localhost:8000/api/cfo/ask"
TIMEOUT = 15

# Categor√≠as de preguntas
QUERIES = {
    "RENTABILIDAD": [
        "¬øCu√°l es la rentabilidad este mes?",
        "¬øCu√°l es la rentabilidad del trimestre?",
        "¬øCu√°l es la rentabilidad del a√±o?",
        "Rentabilidad promedio mensual",
        "Rentabilidad promedio del a√±o",
        "Mejor mes de rentabilidad",
        "Peor mes de rentabilidad",
        "Tendencia de rentabilidad √∫ltimos 3 meses",
        "Proyecci√≥n de rentabilidad fin de a√±o",
        "Rentabilidad por √°rea",
        "Rentabilidad del √°rea Jur√≠dica",
        "Rentabilidad del √°rea Notarial",
        "Rentabilidad del √°rea Contable",
        "Rentabilidad por localidad",
        "Rentabilidad de Montevideo",
        "Rentabilidad de Mercedes",
        "¬øC√≥mo viene la rentabilidad mes a mes?",
        "Evoluci√≥n de rentabilidad trimestral",
        "Rentabilidad acumulada del a√±o",
        "Alertas de rentabilidad baja",
    ],
    "MONEDA_USD": [
        "Todo en d√≥lares",
        "Mu√©strame los ingresos en USD",
        "Gastos en d√≥lares este mes",
        "Rentabilidad en USD",
        "Distribuciones en d√≥lares",
        "¬øCu√°nto facturamos en d√≥lares?",
        "Total de gastos en USD del a√±o",
        "Comparaci√≥n en d√≥lares Mercedes vs Montevideo",
        "Top √°reas en USD",
        "Resumen ejecutivo en d√≥lares",
        "¬øCu√°nto recibi√≥ Bruno en d√≥lares?",
        "Retiros en USD",
        "Tipo de cambio promedio usado",
        "Operaciones en moneda USD vs UYU",
        "Conversi√≥n de todo a d√≥lares",
    ],
    "COMPARACIONES_TEMPORALES": [
        "Comparar este mes vs anterior",
        "Este trimestre vs anterior",
        "Este a√±o vs anterior",
        "Septiembre vs agosto",
        "Q3 vs Q2",
        "2025 vs 2024",
        "√öltimos 3 meses vs 3 meses anteriores",
        "Evoluci√≥n mensual de ingresos",
        "Evoluci√≥n trimestral de gastos",
        "Comparaci√≥n interanual",
        "Mejor vs peor mes",
        "Primer semestre vs segundo semestre",
        "YTD vs a√±o pasado completo",
        "Tendencia √∫ltimos 12 meses",
        "Estacionalidad por mes",
        "Mes actual vs mismo mes a√±o pasado",
        "Crecimiento mes a mes",
    ],
    "COMPARACIONES_GEOGRAFICAS": [
        "Comparar Mercedes vs Montevideo",
        "¬øQu√© localidad es m√°s rentable?",
        "Ingresos por localidad",
        "Gastos por localidad",
        "Distribuci√≥n geogr√°fica de operaciones",
        "Montevideo este mes",
        "Mercedes este trimestre",
        "Tendencia por localidad",
        "Localidad con m√°s crecimiento",
        "Mix de localidades",
    ],
    "DISTRIBUCIONES": [
        "¬øCu√°nto recibi√≥ Bruno este a√±o?",
        "¬øCu√°nto recibi√≥ Agustina?",
        "¬øCu√°nto recibi√≥ Viviana?",
        "¬øCu√°nto recibi√≥ Gonzalo?",
        "¬øCu√°nto recibi√≥ Pancho?",
        "Total de distribuciones del a√±o",
        "Distribuciones por socio este mes",
        "¬øQui√©n recibi√≥ m√°s?",
        "Ranking de socios por distribuciones",
        "Promedio de distribuci√≥n por socio",
        "Distribuciones en USD por socio",
        "Historial de distribuciones",
        "Distribuciones vs participaci√≥n",
        "Comparaci√≥n distribuciones a√±o actual vs anterior",
    ],
    "AREAS_NEGOCIO": [
        "Ingresos del √°rea Jur√≠dica",
        "Gastos del √°rea Notarial",
        "Rentabilidad del √°rea Contable",
        "Balance del √°rea Recuperaci√≥n",
        "Top 5 √°reas por ingresos",
        "√Årea m√°s rentable",
        "√Årea con m√°s gastos",
        "√Åreas deficitarias",
        "Crecimiento por √°rea",
        "Comparaci√≥n entre √°reas",
        "Mix de ingresos por √°rea",
        "Tendencia por √°rea",
        "√Årea con mejor margen",
        "Gastos Generales totales",
        "Distribuci√≥n porcentual por √°rea",
    ],
    "RESUMENES_KPIS": [
        "Dame un resumen ejecutivo",
        "Dashboard del mes",
        "KPIs principales",
        "M√©tricas clave del trimestre",
        "Resumen anual",
        "Estado de resultados simplificado",
        "Flujo de caja",
        "Capital de trabajo",
        "Balance general",
    ],
    "ESPECIFICAS_NEGOCIO": [
        "¬øCu√°nto facturamos?",
        "¬øCu√°ntas operaciones este mes?",
        "Ticket promedio",
        "Frecuencia de operaciones",
        "Mix de tipos de operaci√≥n",
        "Retiros totales",
        "¬øC√≥mo venimos este mes?",
        "¬øEstamos mejor que el mes pasado?",
        "Proyecci√≥n de cierre",
        "An√°lisis de tendencias",
    ],
}


def probar_pregunta(pregunta):
    """Prueba una pregunta y retorna el resultado"""
    try:
        start = time.time()
        resp = requests.post(
            API_URL,
            json={'pregunta': pregunta},
            headers={'Content-Type': 'application/json'},
            timeout=TIMEOUT
        )
        elapsed = time.time() - start
        
        data = resp.json()
        
        return {
            'exito': data.get('status') == 'success',
            'tiempo': elapsed,
            'respuesta': data.get('respuesta', '')[:100],
            'error': None if data.get('status') == 'success' else data.get('error_tipo', 'unknown')
        }
    except Exception as e:
        return {
            'exito': False,
            'tiempo': 0,
            'respuesta': '',
            'error': str(e)[:50]
        }


def main():
    """Ejecuta todas las pruebas y genera reporte"""
    
    print("\n" + "=" * 100)
    print(" üéØ TEST EXHAUSTIVO DEL CFO AI - 120 QUERIES ".center(100))
    print("=" * 100)
    print()
    
    resultados_por_categoria = {}
    total_exitos = 0
    total_preguntas = 0
    tiempos = []
    fallos_detallados = []
    
    # Probar cada categor√≠a
    for categoria, preguntas in QUERIES.items():
        print(f"\n{'‚îÅ' * 100}")
        print(f"üìÇ {categoria} ({len(preguntas)} preguntas)")
        print(f"{'‚îÅ' * 100}")
        
        exitos_categoria = 0
        
        for i, pregunta in enumerate(preguntas, 1):
            resultado = probar_pregunta(pregunta)
            total_preguntas += 1
            
            if resultado['exito']:
                exitos_categoria += 1
                total_exitos += 1
                tiempos.append(resultado['tiempo'])
                icon = "‚úÖ"
            else:
                icon = "‚ùå"
                fallos_detallados.append({
                    'categoria': categoria,
                    'pregunta': pregunta,
                    'error': resultado['error']
                })
            
            # Mostrar resultado compacto
            print(f"{icon} {i:2}. {pregunta:<50} {resultado['tiempo']:.2f}s")
        
        tasa_categoria = exitos_categoria * 100 // len(preguntas)
        resultados_por_categoria[categoria] = {
            'exitos': exitos_categoria,
            'total': len(preguntas),
            'tasa': tasa_categoria
        }
        
        print(f"\nüìä Resultado: {exitos_categoria}/{len(preguntas)} ({tasa_categoria}%)")
    
    # Reporte final
    print("\n" + "=" * 100)
    print(" üìä REPORTE FINAL ".center(100, "="))
    print("=" * 100)
    print()
    
    # Resumen por categor√≠a
    print("üìÇ RESUMEN POR CATEGOR√çA:")
    print("-" * 100)
    for cat, res in resultados_por_categoria.items():
        barra = "‚ñà" * (res['tasa'] // 5) + "‚ñë" * (20 - res['tasa'] // 5)
        print(f"{cat:<30} ‚îÇ {res['exitos']:3}/{res['total']:3} ‚îÇ {res['tasa']:3}% ‚îÇ {barra}")
    print("-" * 100)
    
    # Estad√≠sticas globales
    tasa_global = total_exitos * 100 // total_preguntas
    tiempo_promedio = sum(tiempos) / len(tiempos) if tiempos else 0
    
    print()
    print(f"‚úÖ TOTAL EXITOSAS:      {total_exitos}/{total_preguntas} ({tasa_global}%)")
    print(f"‚è±Ô∏è  TIEMPO PROMEDIO:     {tiempo_promedio:.2f} segundos")
    print(f"üöÄ VELOCIDAD:           {len(tiempos)/sum(tiempos) if tiempos else 0:.1f} queries/seg")
    print()
    
    # Clasificaci√≥n de resultado
    if tasa_global == 100:
        print("üèÜ " + " SISTEMA PERFECTO - 100% FUNCIONAL ".center(98, "‚ñà"))
    elif tasa_global >= 90:
        print("üéâ " + " SISTEMA EXCELENTE - 90%+ FUNCIONAL ".center(98, "‚ñà"))
    elif tasa_global >= 80:
        print("‚úÖ " + " SISTEMA MUY BUENO - 80%+ FUNCIONAL ".center(98, "‚ñà"))
    elif tasa_global >= 70:
        print("‚ö†Ô∏è  " + " SISTEMA FUNCIONAL - 70%+ NECESITA MEJORAS ".center(98, "‚ñà"))
    else:
        print("‚ùå " + " SISTEMA NECESITA TRABAJO - <70% ".center(98, "‚ñà"))
    
    # Detalles de fallos
    if fallos_detallados:
        print("\n" + "=" * 100)
        print(f" ‚ö†Ô∏è  QUERIES QUE FALLARON ({len(fallos_detallados)}) ".center(100, "="))
        print("=" * 100)
        print()
        
        fallos_por_categoria = defaultdict(list)
        for fallo in fallos_detallados:
            fallos_por_categoria[fallo['categoria']].append(fallo['pregunta'])
        
        for cat, preguntas_fallidas in fallos_por_categoria.items():
            print(f"\nüìÇ {cat}:")
            for p in preguntas_fallidas:
                print(f"   ‚Ä¢ {p}")
    
    print("\n" + "=" * 100)
    print()
    
    # Return code
    return 0 if tasa_global >= 80 else 1


if __name__ == "__main__":
    exit(main())

